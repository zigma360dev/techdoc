{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Zigma360 TechDoc \u00b6 Browse through the help pages by clicking on the top navigation menu and selecting pages in the table of contents to the left. To quickly find specific product information, enter search criteria in the search box above and click the search button. Task for the documentation \u00b6 Tasks: Fill out the About section Fill out the Git section Installation Zigma360 team git workflow Git commands Undoing Changes Prepare How-To section","title":"Home"},{"location":"#welcome-to-zigma360-techdoc","text":"Browse through the help pages by clicking on the top navigation menu and selecting pages in the table of contents to the left. To quickly find specific product information, enter search criteria in the search box above and click the search button.","title":"Welcome to Zigma360 TechDoc"},{"location":"#task-for-the-documentation","text":"Tasks: Fill out the About section Fill out the Git section Installation Zigma360 team git workflow Git commands Undoing Changes Prepare How-To section","title":"Task for the documentation"},{"location":"about/","text":"About \u00b6 The Zigma360 TechDoc is built with MkDocs MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. It requires a recent version of Python and the Python package manager, pip , to be installed on your system. Documentation source files are written in Markdown , and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information.","title":"About"},{"location":"about/#about","text":"The Zigma360 TechDoc is built with MkDocs MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. It requires a recent version of Python and the Python package manager, pip , to be installed on your system. Documentation source files are written in Markdown , and configured with a single YAML configuration file. Start by reading the introductory tutorial , then check the User Guide for more information.","title":"About"},{"location":"about/getting-started/","text":"Getting Started with MkDocs \u00b6 An introductory tutorial! Requirements \u00b6 MkDocs requires a recent version of Python and the Python package manager, pip , to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3 .8.2 $ where python C: \\P rogram Files ( x86 ) \\M icrosoft Visual Studio \\S hared \\P ython37_64 \\p ython.exe $ pip --version pip 20 .0.2 from /usr/local/lib/python3.8/site-packages/pip ( python 3 .8 ) If you already have those packages installed, you may skip down to Installing MkDocs . If Python is installed but is not in your PATH environment variable then just add this path to it. Installing Python \u00b6 Install Python using your package manager of choice, or by downloading an installer appropriate for your system from python.org and running it. Installing pip \u00b6 If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py Installing MkDocs \u00b6 Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1 .2.0 from /usr/local/lib/python3.8/site-packages/mkdocs ( Python 3 .8 ) Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python37_64\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ). Installing Material theme for MkDocs \u00b6 Material theme for MkDocs can be installed with pip : pip install mkdocs-material Upgrading Material theme for MkDocs \u00b6 Upgrade to the latest version with: pip install --upgrade mkdocs-material Show the currently installed version with: pip show mkdocs-material Working with a project \u00b6 Getting started is super easy. To create a new project , run the following command from the command line: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files ( docs is the default value for the docs_dir configuration setting). Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed. Building the site \u00b6 That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories. Other Commands and Options \u00b6 There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help Deploying \u00b6 The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. Simply upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page. Getting help \u00b6 See the User Guide for more complete documentation of all of MkDocs' features. To get help with MkDocs, please use the GitHub discussions or GitHub issues .","title":"Getting started"},{"location":"about/getting-started/#getting-started-with-mkdocs","text":"An introductory tutorial!","title":"Getting Started with MkDocs"},{"location":"about/getting-started/#requirements","text":"MkDocs requires a recent version of Python and the Python package manager, pip , to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3 .8.2 $ where python C: \\P rogram Files ( x86 ) \\M icrosoft Visual Studio \\S hared \\P ython37_64 \\p ython.exe $ pip --version pip 20 .0.2 from /usr/local/lib/python3.8/site-packages/pip ( python 3 .8 ) If you already have those packages installed, you may skip down to Installing MkDocs . If Python is installed but is not in your PATH environment variable then just add this path to it.","title":"Requirements"},{"location":"about/getting-started/#installing-python","text":"Install Python using your package manager of choice, or by downloading an installer appropriate for your system from python.org and running it.","title":"Installing Python"},{"location":"about/getting-started/#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip , is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: python get-pip.py","title":"Installing pip"},{"location":"about/getting-started/#installing-mkdocs","text":"Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1 .2.0 from /usr/local/lib/python3.8/site-packages/mkdocs ( Python 3 .8 ) Note If you are using Windows, some of the above commands may not work out-of-the-box. A quick solution may be to preface every Python command with python -m like this: python -m pip install mkdocs python -m mkdocs For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python37_64\\ ), open the Tools , then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it ( python win_add2path.py ).","title":"Installing MkDocs"},{"location":"about/getting-started/#installing-material-theme-for-mkdocs","text":"Material theme for MkDocs can be installed with pip : pip install mkdocs-material","title":"Installing Material theme for MkDocs"},{"location":"about/getting-started/#upgrading-material-theme-for-mkdocs","text":"Upgrade to the latest version with: pip install --upgrade mkdocs-material Show the currently installed version with: pip show mkdocs-material","title":"Upgrading Material theme for MkDocs"},{"location":"about/getting-started/#working-with-a-project","text":"Getting started is super easy. To create a new project , run the following command from the command line: mkdocs new my-project cd my-project Take a moment to review the initial project that has been created for you. mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. There's a single configuration file named mkdocs.yml , and a folder named docs that will contain your documentation source files ( docs is the default value for the docs_dir configuration setting). Right now the docs folder just contains a single documentation page, named index.md . MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes [I 160402 15:50:43 handlers:60] Start detecting changes Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed.","title":"Working with a project"},{"location":"about/getting-started/#building-the-site","text":"That's looking good. You're ready to deploy the first pass of your MkLorum documentation. First build the documentation: mkdocs build This will create a new directory, named site . Take a look inside the directory: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Notice that your source documentation has been output as two HTML files named index.html and about/index.html . You also have various other media that's been copied into the site directory as part of the documentation theme. You even have a sitemap.xml file and mkdocs/search_index.json . If you're using source code control such as git you probably don't want to check your documentation builds into the repository. Add a line containing site/ to your .gitignore file. echo \"site/\" >> .gitignore If you're using another source code control tool you'll want to check its documentation on how to ignore specific directories.","title":"Building the site"},{"location":"about/getting-started/#other-commands-and-options","text":"There are various other commands and options available. For a complete list of commands, use the --help flag: mkdocs --help To view a list of options available on a given command, use the --help flag with that command. For example, to get a list of all options available for the build command run the following: mkdocs build --help","title":"Other Commands and Options"},{"location":"about/getting-started/#deploying","text":"The documentation site that you just built only uses static files so you'll be able to host it from pretty much anywhere. Simply upload the contents of the entire site directory to wherever you're hosting your website from and you're done. For specific instructions on a number of common hosts, see the Deploying your Docs page.","title":"Deploying"},{"location":"about/getting-started/#getting-help","text":"See the User Guide for more complete documentation of all of MkDocs' features. To get help with MkDocs, please use the GitHub discussions or GitHub issues .","title":"Getting help"},{"location":"git/","text":"What is Git? \u00b6 Git is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and IDEs (Integrated Development Environments).","title":"What is Git?"},{"location":"git/#what-is-git","text":"Git is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel. A staggering number of software projects rely on Git for version control, including commercial projects as well as open source. Developers who have worked with Git are well represented in the pool of available software development talent and it works well on a wide range of operating systems and IDEs (Integrated Development Environments).","title":"What is Git?"},{"location":"git/git-commands/","text":"Git Commands \u00b6 git add \u00b6 Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history. Related Tutorials \u00b6 Saving changes: git add Learn Git with Bitbucket Cloud: Copy your Git repository and add files Using Branches: git merge Inspecting a repository: git status git branch \u00b6 This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository. Related Tutorials \u00b6 Using Branches: git branch Using Branches: git checkout Using Branches: git merge Learn Git with Bitbucket Cloud: Use a Git branch to merge a file git checkout \u00b6 In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it\u2019s a way to work on a particular line of development. Related Tutorials \u00b6 Using Branches: git checkout Undoing Changes: git checkout Comparing Workflows: Gitflow Workflow git clean \u00b6 Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files. Related Tutorials \u00b6 Undoing Changes: git clean git clone \u00b6 Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository. Related Tutorials \u00b6 Git LFS Comparing Workflows: Forking Workflow Setting up a repository: git clone git commit \u00b6 Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users. Related Tutorials \u00b6 Committing: git commit Using Branches: git merge Rewriting history: git commit --amend Learn Git with Bitbucket Cloud: Copy your Git repository and add files Saving changes: git add git commit --amend \u00b6 Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message. Related Tutorials \u00b6 Rewriting history: git commit --amend git config \u00b6 A convenient way to set configuration options for your Git installation. You\u2019ll typically only need to use this immediately after installing Git on a new development machine. Related Tutorials \u00b6 Setting up a repository: git config Git LFS Install Git: Install Git on Mac OS X Install Git: Install Git on Linux git fetch \u00b6 Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project. Related Tutorials \u00b6 Syncing: git fetch Refs and the Reflog: Refspecs Syncing: git pull git init \u00b6 Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn. Related Tutorials \u00b6 Setting up a repository: git init git log \u00b6 Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots. Related Tutorials \u00b6 Inspecting a repository: git log Advanced Git log: Filtering the Commit History Advanced Git log: Formatting Log Output Advanced Git Tutorials: Overview git merge \u00b6 A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again. Related Tutorials \u00b6 Merging vs. Rebasing: Workflow Walkthrough Using Branches: git merge Comparing Workflows: Gitflow Workflow Merging vs. Rebasing: Conceptual Overview git pull \u00b6 Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update. Related Tutorials \u00b6 Syncing: git pull Comparing Workflows: Centralized Workflow Git LFS Comparing Workflows: Forking Workflow git push \u00b6 Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset. Related Tutorials \u00b6 Syncing: git push Refs and the Reflog: Refspecs Comparing Workflows: Gitflow Workflow Git LFS git rebase \u00b6 Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore. Related Tutorials \u00b6 Merging vs. Rebasing: Workflow Walkthrough Rewriting history: git rebase -i Merging vs. Rebasing: Conceptual Overview Rewriting history: git rebase git rebase -i \u00b6 The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way. Related Tutorials \u00b6 Rewriting history: git rebase -i git reflog \u00b6 Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag. Related Tutorials \u00b6 Rewriting history: git reflog git remote \u00b6 A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut. Related Tutorials \u00b6 Syncing: git remote git reset \u00b6 Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository. Related Tutorials \u00b6 Undoing Changes: git reset Reset, Checkout, and Revert: Commit-level Operation Reset, Checkout, and Revert: File-level Operations Undoing Changes: git clean git revert \u00b6 Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base. Related Tutorials \u00b6 Undoing Changes: git revert Reset, Checkout, and Revert: Commit-level Operation Reset, Checkout, and Revert: Summary git status \u00b6 Displays the state of the working directory and the staged snapshot. You\u2019ll want to run this in conjunction with git add and git commit to see exactly what\u2019s being included in the next snapshot. Related Tutorials \u00b6 Inspecting a repository: git status Git Stash Learn Git with Bitbucket Cloud: Use a Git branch to merge a file Learn Git with Bitbucket Cloud: Copy your Git repository and add files","title":"Git Commands"},{"location":"git/git-commands/#git-commands","text":"","title":"Git Commands"},{"location":"git/git-commands/#git-add","text":"Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.","title":"git add"},{"location":"git/git-commands/#git-branch","text":"This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.","title":"git branch"},{"location":"git/git-commands/#git-checkout","text":"In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it\u2019s a way to work on a particular line of development.","title":"git checkout"},{"location":"git/git-commands/#git-clean","text":"Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.","title":"git clean"},{"location":"git/git-commands/#git-clone","text":"Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.","title":"git clone"},{"location":"git/git-commands/#git-commit","text":"Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.","title":"git commit"},{"location":"git/git-commands/#git-commit-amend","text":"Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message.","title":"git commit --amend"},{"location":"git/git-commands/#git-config","text":"A convenient way to set configuration options for your Git installation. You\u2019ll typically only need to use this immediately after installing Git on a new development machine.","title":"git config"},{"location":"git/git-commands/#git-fetch","text":"Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.","title":"git fetch"},{"location":"git/git-commands/#git-init","text":"Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.","title":"git init"},{"location":"git/git-commands/#git-log","text":"Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.","title":"git log"},{"location":"git/git-commands/#git-merge","text":"A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.","title":"git merge"},{"location":"git/git-commands/#git-pull","text":"Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.","title":"git pull"},{"location":"git/git-commands/#git-push","text":"Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset.","title":"git push"},{"location":"git/git-commands/#git-rebase","text":"Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.","title":"git rebase"},{"location":"git/git-commands/#git-rebase-i","text":"The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way.","title":"git rebase -i"},{"location":"git/git-commands/#git-reflog","text":"Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag.","title":"git reflog"},{"location":"git/git-commands/#git-remote","text":"A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.","title":"git remote"},{"location":"git/git-commands/#git-reset","text":"Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.","title":"git reset"},{"location":"git/git-commands/#git-revert","text":"Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.","title":"git revert"},{"location":"git/git-commands/#git-status","text":"Displays the state of the working directory and the staged snapshot. You\u2019ll want to run this in conjunction with git add and git commit to see exactly what\u2019s being included in the next snapshot.","title":"git status"},{"location":"git/installation/","text":"Step by step installing Git \u00b6 \u0404 \u0431\u0430\u0433\u0430\u0442\u043e \u0440\u0456\u0437\u043d\u0438\u0445 GUI \u043f\u0440\u043e\u0433\u0440\u0430\u043c \u0434\u043b\u044f \u0440\u043e\u0431\u043e\u0442\u0438 \u0456\u0437 Git , \u0430\u043b\u0435 \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0432\u043e\u043d\u0438 \u0432\u0438\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u0449\u043e\u0431 \u0431\u0443\u0432 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c \u0456 \u0432\u0436\u0435 \u043a\u043e\u0436\u0435\u043d \u0434\u043b\u044f \u0441\u0435\u0431\u0435 \u0432\u0438\u0431\u0438\u0440\u0430\u0454 \u0447\u0438\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0442\u0438\u0441\u044f, \u0447\u0438 \u0442\u043e \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0443 Git Bash , \u0447\u0438 \u0442\u043e TortoiseGit \u044f\u043a \u0440\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u043d\u044f \u0434\u043e File Explorer, \u0447\u0438 \u0437\u0430\u0441\u043e\u0431\u0430\u043c\u0438 Visual Studio , \u044f\u043a\u0438\u0439 \u0456\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u043f\u0440\u0430\u0446\u044e\u0454 \u0456\u0437 Git. \u0422\u043e\u043c\u0443 \u043f\u043e\u0447\u043d\u0435\u043c\u043e \u043c\u0438 \u0437\u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \u0441\u0430\u043c\u043e\u0433\u043e Git \u043d\u0430 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440. \u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0443\u0454\u043c\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u044e \u0432\u0435\u0440\u0441\u0456\u044e \u0442\u0443\u0442 https://git-scm.com/download/win \u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454\u043c\u043e \u0456\u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\u043c\u0438 \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e, \u0430\u0431\u043e \u043a\u043e\u043c\u0443 \u044f\u043a \u0437\u0440\u0443\u0447\u043d\u043e: \u041a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u044f Git (\u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u0438, \u044f\u043a\u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0432\u0430\u0442\u0438\u0441\u044f TortoiseSVN ) \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438 Git Bash (\u0430\u0431\u043e Command Prompt) \u0432\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438, \u043f\u0456\u0434\u0441\u0442\u0430\u0432\u0438\u0432\u0448\u0438 \u0441\u0432\u043e\u0457 \u0434\u0430\u043d\u0456 (\u0446\u0456 \u0434\u0430\u043d\u0456 \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u0434\u043e \u0443\u0441\u0456\u0445 \u043a\u043e\u043c\u0456\u0442\u0456\u0432, \u0449\u043e \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u044e\u0442\u044c\u0441\u044f): git config --global user.name \"Emma Paris\" git config --global user.email \"eparis@mail.com\" \u0446\u0456 \u0434\u0430\u043d\u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u0430\u0439\u043b\u0456 %USERPROFILE%\\.gitconfig \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 TortoiseGit \u0456\u0437 \u043e\u043f\u0446\u0456\u044f\u043c\u0438 \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e \u041f\u0456\u0441\u043b\u044f \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432\u0456\u0437\u0430\u0440\u0434 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f ( Run first start wizard ) Note \u0413\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 SSH \u043a\u043b\u044e\u0447\u0456 \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e, \u0442\u0430\u043a \u044f\u043a \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 HTTPS \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0456\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0456\u0454\u044e \u043f\u043e \u043b\u043e\u0433\u0456\u043d\u0443 \u0456 \u043f\u0430\u0440\u043e\u043b\u044e.","title":"Installation"},{"location":"git/installation/#step-by-step-installing-git","text":"\u0404 \u0431\u0430\u0433\u0430\u0442\u043e \u0440\u0456\u0437\u043d\u0438\u0445 GUI \u043f\u0440\u043e\u0433\u0440\u0430\u043c \u0434\u043b\u044f \u0440\u043e\u0431\u043e\u0442\u0438 \u0456\u0437 Git , \u0430\u043b\u0435 \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0432\u043e\u043d\u0438 \u0432\u0438\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u0449\u043e\u0431 \u0431\u0443\u0432 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c \u0456 \u0432\u0436\u0435 \u043a\u043e\u0436\u0435\u043d \u0434\u043b\u044f \u0441\u0435\u0431\u0435 \u0432\u0438\u0431\u0438\u0440\u0430\u0454 \u0447\u0438\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0442\u0438\u0441\u044f, \u0447\u0438 \u0442\u043e \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0443 Git Bash , \u0447\u0438 \u0442\u043e TortoiseGit \u044f\u043a \u0440\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u043d\u044f \u0434\u043e File Explorer, \u0447\u0438 \u0437\u0430\u0441\u043e\u0431\u0430\u043c\u0438 Visual Studio , \u044f\u043a\u0438\u0439 \u0456\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u043f\u0440\u0430\u0446\u044e\u0454 \u0456\u0437 Git. \u0422\u043e\u043c\u0443 \u043f\u043e\u0447\u043d\u0435\u043c\u043e \u043c\u0438 \u0437\u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \u0441\u0430\u043c\u043e\u0433\u043e Git \u043d\u0430 \u043a\u043e\u043c\u043f'\u044e\u0442\u0435\u0440. \u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0443\u0454\u043c\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u044e \u0432\u0435\u0440\u0441\u0456\u044e \u0442\u0443\u0442 https://git-scm.com/download/win \u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454\u043c\u043e \u0456\u0437 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f\u043c\u0438 \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e, \u0430\u0431\u043e \u043a\u043e\u043c\u0443 \u044f\u043a \u0437\u0440\u0443\u0447\u043d\u043e: \u041a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u044f Git (\u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u0438, \u044f\u043a\u0449\u043e \u0431\u0443\u0434\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0432\u0430\u0442\u0438\u0441\u044f TortoiseSVN ) \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438 Git Bash (\u0430\u0431\u043e Command Prompt) \u0432\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438, \u043f\u0456\u0434\u0441\u0442\u0430\u0432\u0438\u0432\u0448\u0438 \u0441\u0432\u043e\u0457 \u0434\u0430\u043d\u0456 (\u0446\u0456 \u0434\u0430\u043d\u0456 \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u0434\u043e \u0443\u0441\u0456\u0445 \u043a\u043e\u043c\u0456\u0442\u0456\u0432, \u0449\u043e \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u044e\u0442\u044c\u0441\u044f): git config --global user.name \"Emma Paris\" git config --global user.email \"eparis@mail.com\" \u0446\u0456 \u0434\u0430\u043d\u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u0430\u0439\u043b\u0456 %USERPROFILE%\\.gitconfig \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u0456 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 TortoiseGit \u0456\u0437 \u043e\u043f\u0446\u0456\u044f\u043c\u0438 \u043f\u043e \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044e \u041f\u0456\u0441\u043b\u044f \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432\u0456\u0437\u0430\u0440\u0434 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f ( Run first start wizard ) Note \u0413\u0435\u043d\u0435\u0440\u0443\u0432\u0430\u0442\u0438 SSH \u043a\u043b\u044e\u0447\u0456 \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e, \u0442\u0430\u043a \u044f\u043a \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 HTTPS \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0456\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0456\u0454\u044e \u043f\u043e \u043b\u043e\u0433\u0456\u043d\u0443 \u0456 \u043f\u0430\u0440\u043e\u043b\u044e.","title":"Step by step installing Git"},{"location":"git/undoing-changes/","text":"Undoing Changes \u00b6 This tutorial provides all of the necessary skills to work with previous revisions of a software project. First, it shows you how to explore old commits, then it explains the difference between reverting public commits in the project history vs. resetting unpublished changes on your local machine. git checkout \u00b6 The git checkout command serves three distinct functions: checking out files, checking out commits, and checking out branches. In this module, we\u2019re only concerned with the first two configurations. Checking out a commit makes the entire working directory match that commit. This can be used to view an old state of your project without altering your current state in any way. Checking out a file lets you see an old version of that particular file, leaving the rest of your working directory untouched. Usage \u00b6 git checkout master Return to the master branch. Branches are covered in depth in the next module, but for now, you can just think of this as a way to get back to the \u201ccurrent\u201d state of the project. git checkout <commit> <file> Check out a previous version of a file. This turns the <file> that resides in the working directory into an exact copy of the one from <commit> and adds it to the staging area. git checkout <commit> Update all files in the working directory to match the specified commit. You can use either a commit hash or a tag as the <commit> argument. This will put you in a detached HEAD state. Discussion \u00b6 The whole idea behind any version control system is to store \u201csafe\u201d copies of a project so that you never have to worry about irreparably breaking your code base. Once you\u2019ve built up a project history, git checkout is an easy way to \u201cload\u201d any of these saved snapshots onto your development machine. Checking out an old commit is a read-only operation. It\u2019s impossible to harm your repository while viewing an old revision. The \u201ccurrent\u201d state of your project remains untouched in the master branch (see the Branches Module for details). During the normal course of development, the HEAD usually points to master or some other local branch, but when you check out a previous commit, HEAD no longer points to a branch\u2014it points directly to a commit. This is called a \u201cdetached HEAD \u201d state, and it can be visualized as the following: On the other hand, checking out an old file does affect the current state of your repository. You can re-commit the old version in a new snapshot as you would any other file. So, in effect, this usage of git checkout serves as a way to revert back to an old version of an individual file. Example \u00b6 Viewing an Old Revision \u00b6 This example assumes that you\u2019ve started developing a crazy experiment, but you\u2019re not sure if you want to keep it or not. To help you decide, you want to take a look at the state of the project before you started your experiment. First, you\u2019ll need to find the ID of the revision you want to see. git log --oneline Let\u2019s say your project history looks something like the following: b7119f2 Continue doing crazy things 872fa7e Try something crazy a1e8fb5 Make some important changes to hello.py 435b61d Create hello.py 9773e52 Initial import You can use git checkout to view the \u201cMake some import changes to hello.py\u201d commit as follows: git checkout a1e8fb5 This makes your working directory match the exact state of the a1e8fb5 commit. You can look at files, compile the project, run tests, and even edit files without worrying about losing the current state of the project. Nothing you do in here will be saved in your repository. To continue developing, you need to get back to the \u201ccurrent\u201d state of your project: git checkout master This assumes that you're developing on the default master branch, which will be thoroughly discussed in the Branches Module. Once you\u2019re back in the master branch, you can use either git revert or git reset to undo any undesired changes. Checking Out a File \u00b6 If you\u2019re only interested in a single file, you can also use git checkout to fetch an old version of it. For example, if you only wanted to see the hello.py file from the old commit, you could use the following command: git checkout a1e8fb5 hello.py Remember, unlike checking out a commit, this does affect the current state of your project. The old file revision will show up as a \u201cChange to be committed,\u201d giving you the opportunity to revert back to the previous version of the file. If you decide you don\u2019t want to keep the old version, you can check out the most recent version with the following: git checkout HEAD hello.py git revert \u00b6 The git revert command undoes a committed snapshot. But, instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit and appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration. Usage \u00b6 git revert <commit> Generate a new commit that undoes all of the changes introduced in <commit> , then apply it to the current branch. Discussion \u00b6 Reverting should be used when you want to remove an entire commit from your project history. This can be useful, for example, if you\u2019re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use git revert to automatically do all of this for you. Reverting vs. Resetting \u00b6 It's important to understand that git revert undoes a single commit\u2014it does not \"revert\" back to the previous state of a project by removing all subsequent commits. In Git, this is actually called a reset , not a revert . Reverting has two important advantages over resetting. First, it doesn\u2019t change the project history, which makes it a \u201csafe\u201d operation for commits that have already been published to a shared repository. For details about why altering shared history is dangerous, please see the git reset page. Second, git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backwards from the current commit. For example, if you wanted to undo an old commit with git reset , you would have to remove all of the commits that occurred after the target commit, remove it, then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution. Example \u00b6 The following example is a simple demonstration of git revert . It commits a snapshot, then immediately undoes it with a revert. # Edit some tracked files # Commit a snapshot git commit -m \"Make some changes that will be undone\" # Revert the commit we just created git revert HEAD This can be visualized as the following: Note that the 4 th commit is still in the project history after the revert. Instead of deleting it, git revert added a new commit to undo its changes. As a result, the 3 rd and 5 th commits represent the exact same code base, and the 4 th commit is still in our history just in case we want to go back to it down the road. git reset \u00b6 If git revert is a \u201csafe\u201d way to undo changes, you can think of git reset as the dangerous method. When you undo with git reset (and the commits are no longer referenced by any ref or the reflog), there is no way to retrieve the original copy\u2014it is a permanent undo. Care must be taken when using this tool, as it\u2019s one of the only Git commands that has the potential to lose your work. Like git checkout , git reset is a versatile command with many configurations. It can be used to remove committed snapshots, although it\u2019s more often used to undo changes in the staging area and the working directory. In either case, it should only be used to undo local changes\u2014you should never reset snapshots that have been shared with other developers. Usage \u00b6 git reset <file> Remove the specified file from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes. git reset Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch. git reset --hard Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the --hard flag tells Git to overwrite all changes in the working directory, too. Put another way: this obliterates all uncommitted changes, so make sure you really want to throw away your local developments before using it. git reset <commit> Move the current branch tip backward to <commit> , reset the staging area to match, but leave the working directory alone. All changes made since <commit> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots. git reset --hard <commit> Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match. This obliterates not only the uncommitted changes, but all commits after <commit> , as well. Discussion \u00b6 All of the above invocations are used to remove changes from a repository. Without the --hard flag, git reset is a way to clean up a repository by unstaging changes or uncommitting a series of snapshots and re-building them from scratch. The --hard flag comes in handy when an experiment has gone horribly wrong and you need a clean slate to work with. Whereas reverting is designed to safely undo a public commit, git reset is designed to undo local changes. Because of their distinct goals, the two commands are implemented differently: resetting completely removes a changeset, whereas reverting maintains the original changeset and uses a new commit to apply the undo. Don\u2019t Reset Public History \u00b6 You should never use git reset <commit> when any snapshots after have been pushed to a public repository. After publishing a commit, you have to assume that other developers are reliant upon it. Removing a commit that other team members have continued developing poses serious problems for collaboration. When they try to sync up with your repository, it will look like a chunk of the project history abruptly disappeared. The sequence below demonstrates what happens when you try to reset a public commit. The origin/master branch is the central repository\u2019s version of your local master branch. As soon as you add new commits after the reset, Git will think that your local history has diverged from origin/master , and the merge commit required to synchronize your repositories is likely to confuse and frustrate your team. The point is, make sure that you\u2019re using git reset <commit> on a local experiment that went wrong\u2014not on published changes. If you need to fix a public commit, the git revert command was designed specifically for this purpose. Examples \u00b6 Unstaging a File \u00b6 The git reset command is frequently encountered while preparing the staged snapshot. The next example assumes you have two files called hello.py and main.py that you\u2019ve already added to the repository. # Edit both hello.py and main.py # Stage everything in the current directory git add . # Realize that the changes in hello.py and main.py # should be committed in different snapshots # Unstage main.py git reset main.py # Commit only hello.py git commit -m \"Make some changes to hello.py\" # Commit main.py in a separate snapshot git add main.py git commit -m \"Edit main.py\" As you can see, git reset helps you keep your commits highly-focused by letting you unstage changes that aren\u2019t related to the next commit. Removing Local Commits \u00b6 The next example shows a more advanced use case. It demonstrates what happens when you\u2019ve been working on a new experiment for a while, but decide to completely throw it away after committing a few snapshots. # Create a new file called `foo.py` and add some code to it # Commit it to the project history git add foo.py git commit -m \"Start developing a crazy feature\" # Edit `foo.py` again and change some other tracked files, too # Commit another snapshot git commit -a -m \"Continue my crazy feature\" # Decide to scrap the feature and remove the associated commits git reset --hard HEAD~2 The git reset HEAD~2 command moves the current branch backward by two commits, effectively removing the two snapshots we just created from the project history. Remember that this kind of reset should only be used on unpublished commits. Never perform the above operation if you\u2019ve already pushed your commits to a shared repository. git clean \u00b6 The git clean command removes untracked files from your working directory. This is really more of a convenience command, since it\u2019s trivial to see which files are untracked with git status and remove them manually. Like an ordinary rm command, git clean is not undoable, so make sure you really want to delete the untracked files before you run it. The git clean command is often executed in conjunction with git reset --hard . Remember that resetting only affects tracked files, so a separate command is required for cleaning up untracked ones. Combined, these two commands let you return the working directory to the exact state of a particular commit. Usage \u00b6 git clean -n Perform a \u201cdry run\u201d of git clean. This will show you which files are going to be removed without actually doing it. git clean -f Remove untracked files from the current directory. The -f (force) flag is required unless the clean.requireForce configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore. git clean -f <path> Remove untracked files, but limit the operation to the specified path. git clean -df Remove untracked files and untracked directories from the current directory. git clean -xf Remove untracked files from the current directory as well as any files that Git usually ignores. Discussion \u00b6 The git reset --hard and git clean -f commands are your best friends after you\u2019ve made some embarrassing developments in your local repository and want to burn the evidence. Running both of them will make your working directory match the most recent commit, giving you a clean slate to work with. The git clean command can also be useful for cleaning up the working directory after a build. For example, it can easily remove the .o and .exe binaries generated by a C compiler. This is occasionally a necessary step before packaging a project for release. The -x option is particularly convenient for this purpose. Keep in mind that, along with git reset , git clean is one of the only Git commands that has the potential to permanently delete commits, so be careful with it. In fact, it\u2019s so easy to lose important additions that the Git maintainers require the -f flag for even the most basic operations. This prevents you from accidentally deleting everything with a naive git clean call. Example \u00b6 The following example obliterates all changes in the working directory, including new files that have been added. It assumes you\u2019ve already committed a few snapshots and are experimenting with some new developments. # Edit some existing files # Add some new files # Realize you have no idea what you're doing # Undo changes in tracked files git reset --hard # Remove untracked files git clean -df After running this reset/clean sequence, the working directory and the staging area will look exactly like the most recent commit, and git status will report a clean working directory. You're now ready to begin again. Note that, unlike the second example in git reset , the new files were _not _added to the repository. As a result, they could not be affected by git reset --hard , and git clean was required to delete them.","title":"Undoing Changes"},{"location":"git/undoing-changes/#undoing-changes","text":"This tutorial provides all of the necessary skills to work with previous revisions of a software project. First, it shows you how to explore old commits, then it explains the difference between reverting public commits in the project history vs. resetting unpublished changes on your local machine.","title":"Undoing Changes"},{"location":"git/undoing-changes/#git-checkout","text":"The git checkout command serves three distinct functions: checking out files, checking out commits, and checking out branches. In this module, we\u2019re only concerned with the first two configurations. Checking out a commit makes the entire working directory match that commit. This can be used to view an old state of your project without altering your current state in any way. Checking out a file lets you see an old version of that particular file, leaving the rest of your working directory untouched.","title":"git checkout"},{"location":"git/undoing-changes/#usage","text":"git checkout master Return to the master branch. Branches are covered in depth in the next module, but for now, you can just think of this as a way to get back to the \u201ccurrent\u201d state of the project. git checkout <commit> <file> Check out a previous version of a file. This turns the <file> that resides in the working directory into an exact copy of the one from <commit> and adds it to the staging area. git checkout <commit> Update all files in the working directory to match the specified commit. You can use either a commit hash or a tag as the <commit> argument. This will put you in a detached HEAD state.","title":"Usage"},{"location":"git/undoing-changes/#discussion","text":"The whole idea behind any version control system is to store \u201csafe\u201d copies of a project so that you never have to worry about irreparably breaking your code base. Once you\u2019ve built up a project history, git checkout is an easy way to \u201cload\u201d any of these saved snapshots onto your development machine. Checking out an old commit is a read-only operation. It\u2019s impossible to harm your repository while viewing an old revision. The \u201ccurrent\u201d state of your project remains untouched in the master branch (see the Branches Module for details). During the normal course of development, the HEAD usually points to master or some other local branch, but when you check out a previous commit, HEAD no longer points to a branch\u2014it points directly to a commit. This is called a \u201cdetached HEAD \u201d state, and it can be visualized as the following: On the other hand, checking out an old file does affect the current state of your repository. You can re-commit the old version in a new snapshot as you would any other file. So, in effect, this usage of git checkout serves as a way to revert back to an old version of an individual file.","title":"Discussion"},{"location":"git/undoing-changes/#example","text":"","title":"Example"},{"location":"git/undoing-changes/#git-revert","text":"The git revert command undoes a committed snapshot. But, instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit and appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.","title":"git revert"},{"location":"git/undoing-changes/#usage_1","text":"git revert <commit> Generate a new commit that undoes all of the changes introduced in <commit> , then apply it to the current branch.","title":"Usage"},{"location":"git/undoing-changes/#discussion_1","text":"Reverting should be used when you want to remove an entire commit from your project history. This can be useful, for example, if you\u2019re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use git revert to automatically do all of this for you.","title":"Discussion"},{"location":"git/undoing-changes/#example_1","text":"The following example is a simple demonstration of git revert . It commits a snapshot, then immediately undoes it with a revert. # Edit some tracked files # Commit a snapshot git commit -m \"Make some changes that will be undone\" # Revert the commit we just created git revert HEAD This can be visualized as the following: Note that the 4 th commit is still in the project history after the revert. Instead of deleting it, git revert added a new commit to undo its changes. As a result, the 3 rd and 5 th commits represent the exact same code base, and the 4 th commit is still in our history just in case we want to go back to it down the road.","title":"Example"},{"location":"git/undoing-changes/#git-reset","text":"If git revert is a \u201csafe\u201d way to undo changes, you can think of git reset as the dangerous method. When you undo with git reset (and the commits are no longer referenced by any ref or the reflog), there is no way to retrieve the original copy\u2014it is a permanent undo. Care must be taken when using this tool, as it\u2019s one of the only Git commands that has the potential to lose your work. Like git checkout , git reset is a versatile command with many configurations. It can be used to remove committed snapshots, although it\u2019s more often used to undo changes in the staging area and the working directory. In either case, it should only be used to undo local changes\u2014you should never reset snapshots that have been shared with other developers.","title":"git reset"},{"location":"git/undoing-changes/#usage_2","text":"git reset <file> Remove the specified file from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes. git reset Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch. git reset --hard Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the --hard flag tells Git to overwrite all changes in the working directory, too. Put another way: this obliterates all uncommitted changes, so make sure you really want to throw away your local developments before using it. git reset <commit> Move the current branch tip backward to <commit> , reset the staging area to match, but leave the working directory alone. All changes made since <commit> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots. git reset --hard <commit> Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match. This obliterates not only the uncommitted changes, but all commits after <commit> , as well.","title":"Usage"},{"location":"git/undoing-changes/#discussion_2","text":"All of the above invocations are used to remove changes from a repository. Without the --hard flag, git reset is a way to clean up a repository by unstaging changes or uncommitting a series of snapshots and re-building them from scratch. The --hard flag comes in handy when an experiment has gone horribly wrong and you need a clean slate to work with. Whereas reverting is designed to safely undo a public commit, git reset is designed to undo local changes. Because of their distinct goals, the two commands are implemented differently: resetting completely removes a changeset, whereas reverting maintains the original changeset and uses a new commit to apply the undo.","title":"Discussion"},{"location":"git/undoing-changes/#examples","text":"","title":"Examples"},{"location":"git/undoing-changes/#git-clean","text":"The git clean command removes untracked files from your working directory. This is really more of a convenience command, since it\u2019s trivial to see which files are untracked with git status and remove them manually. Like an ordinary rm command, git clean is not undoable, so make sure you really want to delete the untracked files before you run it. The git clean command is often executed in conjunction with git reset --hard . Remember that resetting only affects tracked files, so a separate command is required for cleaning up untracked ones. Combined, these two commands let you return the working directory to the exact state of a particular commit.","title":"git clean"},{"location":"git/undoing-changes/#usage_3","text":"git clean -n Perform a \u201cdry run\u201d of git clean. This will show you which files are going to be removed without actually doing it. git clean -f Remove untracked files from the current directory. The -f (force) flag is required unless the clean.requireForce configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore. git clean -f <path> Remove untracked files, but limit the operation to the specified path. git clean -df Remove untracked files and untracked directories from the current directory. git clean -xf Remove untracked files from the current directory as well as any files that Git usually ignores.","title":"Usage"},{"location":"git/undoing-changes/#discussion_3","text":"The git reset --hard and git clean -f commands are your best friends after you\u2019ve made some embarrassing developments in your local repository and want to burn the evidence. Running both of them will make your working directory match the most recent commit, giving you a clean slate to work with. The git clean command can also be useful for cleaning up the working directory after a build. For example, it can easily remove the .o and .exe binaries generated by a C compiler. This is occasionally a necessary step before packaging a project for release. The -x option is particularly convenient for this purpose. Keep in mind that, along with git reset , git clean is one of the only Git commands that has the potential to permanently delete commits, so be careful with it. In fact, it\u2019s so easy to lose important additions that the Git maintainers require the -f flag for even the most basic operations. This prevents you from accidentally deleting everything with a naive git clean call.","title":"Discussion"},{"location":"git/undoing-changes/#example_2","text":"The following example obliterates all changes in the working directory, including new files that have been added. It assumes you\u2019ve already committed a few snapshots and are experimenting with some new developments. # Edit some existing files # Add some new files # Realize you have no idea what you're doing # Undo changes in tracked files git reset --hard # Remove untracked files git clean -df After running this reset/clean sequence, the working directory and the staging area will look exactly like the most recent commit, and git status will report a clean working directory. You're now ready to begin again. Note that, unlike the second example in git reset , the new files were _not _added to the repository. As a result, they could not be affected by git reset --hard , and git clean was required to delete them.","title":"Example"},{"location":"git/zigma360-git-workflow/","text":"Zigma360 team git workflow \u00b6 General Rules \u00b6 We use a similar strategy to the GitLab Workflow. Web access to the Zigma360 Git Bitbucket server: https://git.zigma360.com/dashboard The repository has the master branch for the main development, branches for each release with a minor version ( 2-99-stable , 2-100-stable ) and branches for tasks feature/My-task-name or bugs bug/An-annoying-bug . Any significant change to the code (more than 1 hour) should start with an issue (task or bug) in the tracking system where the goal is described. Note Issue titles should describe the desired state of the system, e.g. \" As an administrator I want to remove users without receiving an error \" instead of \" Admin can't remove users \". Every task or bug have to be done on a separate feature branch and the name of this branch should start with the issue number, for example \" SWF-00101-add-some-buttons \". When you are done or want to discuss the code you open a merge/pull request . This is an online place to discuss the change and review the code. Opening a merge/pull request is a manual action since you do not always want to merge a new branch you push, it could be a long-running environment or release branch. If you open the merge request but do not assign it to anyone it is a 'Work In Progress' merge request. When you feel comfortable with your branch to be merged with the master branch you assign it to the person that knows most about the codebase you are changing and mention any other people you would like feedback from. There is room for more feedback and after the assigned person feels comfortable with the result the branch is merged. If the assigned person does not feel comfortable they can close the merge request without merging. There are some brunch types if it's a feature, bug or quick fix: Bugfix , Feature , Hotfix , Custom and Release (when a new version is preparing). Developers have to specify which type of brunch they use for a creating branch. This can be done in the git web interface Bitbucket or directly from a bug tracking system like Jira Getting Started \u00b6 Checkout \u00b6 Checkout the master branch from the repository (the very beginning) Use this url to the Zigma360 repository: https://username@git.zigma360.com/scm/zig/zigma360.git it's good to specify this option to do always rebase after pull instead of merge (the same as command git pull --rebase ): git config --global pull.rebase true Wait until the work has been successfully done Pulling \u00b6 Update your local repository to the newest commits ( git pull ) - safe operation Update your local repository to the newest commits and undo all local changes ( git fetch ) Check for modifications \u00b6 To check changes in a repository you can do from this context menu Commiting \u00b6 Commit changes and push to the server at the same time If you have forgotten to add some files to the last commit you can add them using a next one with the option \" Amend Last Commit \".","title":"Zigma360 git workflow"},{"location":"git/zigma360-git-workflow/#zigma360-team-git-workflow","text":"","title":"Zigma360 team git workflow"},{"location":"git/zigma360-git-workflow/#general-rules","text":"We use a similar strategy to the GitLab Workflow. Web access to the Zigma360 Git Bitbucket server: https://git.zigma360.com/dashboard The repository has the master branch for the main development, branches for each release with a minor version ( 2-99-stable , 2-100-stable ) and branches for tasks feature/My-task-name or bugs bug/An-annoying-bug . Any significant change to the code (more than 1 hour) should start with an issue (task or bug) in the tracking system where the goal is described. Note Issue titles should describe the desired state of the system, e.g. \" As an administrator I want to remove users without receiving an error \" instead of \" Admin can't remove users \". Every task or bug have to be done on a separate feature branch and the name of this branch should start with the issue number, for example \" SWF-00101-add-some-buttons \". When you are done or want to discuss the code you open a merge/pull request . This is an online place to discuss the change and review the code. Opening a merge/pull request is a manual action since you do not always want to merge a new branch you push, it could be a long-running environment or release branch. If you open the merge request but do not assign it to anyone it is a 'Work In Progress' merge request. When you feel comfortable with your branch to be merged with the master branch you assign it to the person that knows most about the codebase you are changing and mention any other people you would like feedback from. There is room for more feedback and after the assigned person feels comfortable with the result the branch is merged. If the assigned person does not feel comfortable they can close the merge request without merging. There are some brunch types if it's a feature, bug or quick fix: Bugfix , Feature , Hotfix , Custom and Release (when a new version is preparing). Developers have to specify which type of brunch they use for a creating branch. This can be done in the git web interface Bitbucket or directly from a bug tracking system like Jira","title":"General Rules"},{"location":"git/zigma360-git-workflow/#getting-started","text":"","title":"Getting Started"},{"location":"git/zigma360-git-workflow/#checkout","text":"Checkout the master branch from the repository (the very beginning) Use this url to the Zigma360 repository: https://username@git.zigma360.com/scm/zig/zigma360.git it's good to specify this option to do always rebase after pull instead of merge (the same as command git pull --rebase ): git config --global pull.rebase true Wait until the work has been successfully done","title":"Checkout"},{"location":"git/zigma360-git-workflow/#pulling","text":"Update your local repository to the newest commits ( git pull ) - safe operation Update your local repository to the newest commits and undo all local changes ( git fetch )","title":"Pulling"},{"location":"git/zigma360-git-workflow/#check-for-modifications","text":"To check changes in a repository you can do from this context menu","title":"Check for modifications"},{"location":"git/zigma360-git-workflow/#commiting","text":"Commit changes and push to the server at the same time If you have forgotten to add some files to the last commit you can add them using a next one with the option \" Amend Last Commit \".","title":"Commiting"},{"location":"how-to/cloud-wildcard-certificate/","text":"Wildcard SSL certificate for Zigma cloud service using Let\u2019s Encrypt \u00b6 In this page will cover, how to generate a wildcard SSL certificate for the *.client.zigma360.com domain using Let\u2019s Encrypt free service and a PowerShell module Posh-ACME . Requirements and Platform Support \u00b6 Supports Windows PowerShell 5.1 (Desktop edition) with .NET Framework 4.7.1 or later Supports PowerShell 6.2 or later ( Core edition ) on all supported OS platforms. Requires FullLanguage language mode To check PowerShell version: $PSversionTable or get-host|Select-Object version Installation Posh-ACME (Stable) \u00b6 The latest release can found in the PowerShell Gallery . Installing is easy from the gallery using Install-Module . See Installing PowerShellGet if you run into problems with it. # install for all users (requires elevated privs) Install-Module -Name Posh-ACME -Scope AllUsers # install for current user Install-Module -Name Posh-ACME -Scope CurrentUser Picking a Server \u00b6 Before we begin, let's configure our ACME server to be the Let's Encrypt Production server. Set-PAServer LE_PROD Note LE_PROD is a shortcut for the Let's Encrypt Production server's directory URL. Other currently supported shortcuts include LE_STAGE , BUYPASS_PROD , BUYPASS_TEST , and ZEROSSL_PROD . Warning If the Set-PAServer command executes with an error Set-PAServer : Errors occurred wile loading the format data file...xml is not digitally signed.. you will probably need to run this command as administrator Set-ExecutionPolicy RemoteSigned -Force and try to execute the previous command again. Your First Certificate \u00b6 The bare minimum you need to request a certificate is just the domain name. Assuming you've reviewed the TOS link from before, add -AcceptTOS to the original command to proceed. You only need to do this once when creating a new account. You also probably want to associate an email address with this account so you can receive certificate expiration notifications (replace admin@example.com with your one). So let's do that even though it's not required. New-PACertificate *. client . zigma360 . com -AcceptTOS -Contact 'admin@example.com' Note Multiple email addresses per account are supported. Just pass it an array of addresses. Because you didn't specify a plugin, it will default to using the Manual DNS plugin. That manual plugin will also be prompting you to create a DNS TXT record to answer the ACME server's validation challenge for the domain. At this point, you can either press Ctrl+C to cancel the process and modify your command or go ahead and create the requested TXT record and hit any key to continue. We'll cover plugins next, so for now create the record manually and press a key to continue. If you run into problems creating the TXT record, check out Troubleshooting DNS Validation . The command will sleep for 2 minutes by default to allow the DNS changes to propagate. Then if the ACME server is able to properly validate the TXT record, the final certificate files are generated and the command should output the details of your new certificate. Only a subset of the details are displayed by default. To see them all, run Get-PACertificate | fl . The files generated in the output folder should contain the following: cert.cer (Base64 encoded PEM certificate) cert.key (Base64 encoded PEM private key) cert.pfx (PKCS12 container with cert+key) chain.cer (Base64 encoded PEM with the issuing CA chain) chainX.cer (Base64 encoded PEM with alternate issuing CA chains) fullchain.cer (Base64 encoded PEM with cert+chain) fullchain.pfx (PKCS12 container with cert+key+chain) Posh-ACME is only designed to obtain certificates, not deploy them to your web server or service. The certificate details are written to the pipeline so you can either save them to a variable or pipe the output to another command. Posh-ACME.Deploy is a sister module containing some example deployment functions for common services to get you started. But ultimately, it's up to you how you want to deploy your certificates. The password on the PFX files is poshacme because we didn't override the default with -PfxPass or -PfxPassSecure . If you're running PowerShell with elevated privileges on Windows, you can also add the -Install switch to automatically import the certificate into the local computer's certificate store. So now you have a certificate and that's great! But Let's Encrypt certificates expire relatively quickly (90 days). Updating an existing certificate for the zigma4clients azure cloud service \u00b6 All certificates issued by Let's Encrypt expire in 90 days, so we need to renew it in advance and update the old one in the service. The service finds certificate by name and it means there is no need to change any settings. Renewals \u00b6 The module saves all of the parameters associated with an order and re-uses the same values to renew it. Let's Encrypt currently caches authorizations for roughly 30 days, so the forced renewal won't need to go through validating the challenges again. Run this command to renew the certificate: Submit-Renewal -Force -NoSkipManualDns If the renewal is successfully completed you can see something like this: Subject NotAfter KeyLength Thumbprint AllSANs ------- -------- --------- ---------- ------- CN=*.client.zigma360.com 3/10/2022 8:34:28 AM 2048 39EB0268B6FD669F7D4A879813B117F7635C50FE {*.client.zigma360.com} If you see this message then it means you need to update a TXT record for your domain: Please create the following TXT records: ------------------------------------------ _acme-challenge.client.zigma360.com -> 5JzcKSxpnV7P0uCSyQ6NMwYj79llkrHYR3io5kv9Akc ------------------------------------------ Press any key to continue.: To do so, open your domain configuration panel for example https://domainname.shop/admin?id=870947&edit=dns&advanced=1 find the _acme-challenge.client.zigma360.com TXT record and put a new value. Then go back to the PowerShell window and press any key, wait until you get the message about successfully renewal. Run the command to show the path to the certificate: Get-PACertificate | fl Deployment \u00b6 Azure key vault zigma4clientskv is used to store the SSL certificate. What we need to do is: open the zigma4clientskv from the Azure portal open the Certificates section select the Wildcard-client-zigma360-com certificate click the New version button choose Method of Certificate Creation : Import select a generated earlier new certificate, put the poshacme password or use your own and click the Create button Then open the zigma4clients cloud service to update link to the certificate: open the Configuration sections find the Certificate setting with the Certificate1 name and update the thumbprint attribute to a thumbprint of the new certificate click the Save button The certificate is updated and the service takes it immediately is use.","title":"Zigma cloud certificate"},{"location":"how-to/cloud-wildcard-certificate/#wildcard-ssl-certificate-for-zigma-cloud-service-using-lets-encrypt","text":"In this page will cover, how to generate a wildcard SSL certificate for the *.client.zigma360.com domain using Let\u2019s Encrypt free service and a PowerShell module Posh-ACME .","title":"Wildcard SSL certificate for Zigma cloud service using Let\u2019s Encrypt"},{"location":"how-to/cloud-wildcard-certificate/#requirements-and-platform-support","text":"Supports Windows PowerShell 5.1 (Desktop edition) with .NET Framework 4.7.1 or later Supports PowerShell 6.2 or later ( Core edition ) on all supported OS platforms. Requires FullLanguage language mode To check PowerShell version: $PSversionTable or get-host|Select-Object version","title":"Requirements and Platform Support"},{"location":"how-to/cloud-wildcard-certificate/#installation-posh-acme-stable","text":"The latest release can found in the PowerShell Gallery . Installing is easy from the gallery using Install-Module . See Installing PowerShellGet if you run into problems with it. # install for all users (requires elevated privs) Install-Module -Name Posh-ACME -Scope AllUsers # install for current user Install-Module -Name Posh-ACME -Scope CurrentUser","title":"Installation Posh-ACME (Stable)"},{"location":"how-to/cloud-wildcard-certificate/#picking-a-server","text":"Before we begin, let's configure our ACME server to be the Let's Encrypt Production server. Set-PAServer LE_PROD Note LE_PROD is a shortcut for the Let's Encrypt Production server's directory URL. Other currently supported shortcuts include LE_STAGE , BUYPASS_PROD , BUYPASS_TEST , and ZEROSSL_PROD . Warning If the Set-PAServer command executes with an error Set-PAServer : Errors occurred wile loading the format data file...xml is not digitally signed.. you will probably need to run this command as administrator Set-ExecutionPolicy RemoteSigned -Force and try to execute the previous command again.","title":"Picking a Server"},{"location":"how-to/cloud-wildcard-certificate/#your-first-certificate","text":"The bare minimum you need to request a certificate is just the domain name. Assuming you've reviewed the TOS link from before, add -AcceptTOS to the original command to proceed. You only need to do this once when creating a new account. You also probably want to associate an email address with this account so you can receive certificate expiration notifications (replace admin@example.com with your one). So let's do that even though it's not required. New-PACertificate *. client . zigma360 . com -AcceptTOS -Contact 'admin@example.com' Note Multiple email addresses per account are supported. Just pass it an array of addresses. Because you didn't specify a plugin, it will default to using the Manual DNS plugin. That manual plugin will also be prompting you to create a DNS TXT record to answer the ACME server's validation challenge for the domain. At this point, you can either press Ctrl+C to cancel the process and modify your command or go ahead and create the requested TXT record and hit any key to continue. We'll cover plugins next, so for now create the record manually and press a key to continue. If you run into problems creating the TXT record, check out Troubleshooting DNS Validation . The command will sleep for 2 minutes by default to allow the DNS changes to propagate. Then if the ACME server is able to properly validate the TXT record, the final certificate files are generated and the command should output the details of your new certificate. Only a subset of the details are displayed by default. To see them all, run Get-PACertificate | fl . The files generated in the output folder should contain the following: cert.cer (Base64 encoded PEM certificate) cert.key (Base64 encoded PEM private key) cert.pfx (PKCS12 container with cert+key) chain.cer (Base64 encoded PEM with the issuing CA chain) chainX.cer (Base64 encoded PEM with alternate issuing CA chains) fullchain.cer (Base64 encoded PEM with cert+chain) fullchain.pfx (PKCS12 container with cert+key+chain) Posh-ACME is only designed to obtain certificates, not deploy them to your web server or service. The certificate details are written to the pipeline so you can either save them to a variable or pipe the output to another command. Posh-ACME.Deploy is a sister module containing some example deployment functions for common services to get you started. But ultimately, it's up to you how you want to deploy your certificates. The password on the PFX files is poshacme because we didn't override the default with -PfxPass or -PfxPassSecure . If you're running PowerShell with elevated privileges on Windows, you can also add the -Install switch to automatically import the certificate into the local computer's certificate store. So now you have a certificate and that's great! But Let's Encrypt certificates expire relatively quickly (90 days).","title":"Your First Certificate"},{"location":"how-to/cloud-wildcard-certificate/#updating-an-existing-certificate-for-the-zigma4clients-azure-cloud-service","text":"All certificates issued by Let's Encrypt expire in 90 days, so we need to renew it in advance and update the old one in the service. The service finds certificate by name and it means there is no need to change any settings.","title":"Updating an existing certificate for the zigma4clients azure cloud service"},{"location":"how-to/cloud-wildcard-certificate/#renewals","text":"The module saves all of the parameters associated with an order and re-uses the same values to renew it. Let's Encrypt currently caches authorizations for roughly 30 days, so the forced renewal won't need to go through validating the challenges again. Run this command to renew the certificate: Submit-Renewal -Force -NoSkipManualDns If the renewal is successfully completed you can see something like this: Subject NotAfter KeyLength Thumbprint AllSANs ------- -------- --------- ---------- ------- CN=*.client.zigma360.com 3/10/2022 8:34:28 AM 2048 39EB0268B6FD669F7D4A879813B117F7635C50FE {*.client.zigma360.com} If you see this message then it means you need to update a TXT record for your domain: Please create the following TXT records: ------------------------------------------ _acme-challenge.client.zigma360.com -> 5JzcKSxpnV7P0uCSyQ6NMwYj79llkrHYR3io5kv9Akc ------------------------------------------ Press any key to continue.: To do so, open your domain configuration panel for example https://domainname.shop/admin?id=870947&edit=dns&advanced=1 find the _acme-challenge.client.zigma360.com TXT record and put a new value. Then go back to the PowerShell window and press any key, wait until you get the message about successfully renewal. Run the command to show the path to the certificate: Get-PACertificate | fl","title":"Renewals"},{"location":"how-to/cloud-wildcard-certificate/#deployment","text":"Azure key vault zigma4clientskv is used to store the SSL certificate. What we need to do is: open the zigma4clientskv from the Azure portal open the Certificates section select the Wildcard-client-zigma360-com certificate click the New version button choose Method of Certificate Creation : Import select a generated earlier new certificate, put the poshacme password or use your own and click the Create button Then open the zigma4clients cloud service to update link to the certificate: open the Configuration sections find the Certificate setting with the Certificate1 name and update the thumbprint attribute to a thumbprint of the new certificate click the Save button The certificate is updated and the service takes it immediately is use.","title":"Deployment"},{"location":"how-to/porting-csproject-to-net6/","text":"Porting Projects to .NET 6 \u00b6 This article provides an overview of what you should consider when porting your code from .NET Framework to .NET (formerly named .NET Core). Porting to .NET from .NET Framework for many projects is relatively straightforward. The complexity of your projects dictates how much work you'll do after the initial migration of the project files. Projects where the app-model is available in .NET (such as libraries, console apps, and desktop apps) usually require little change. Projects that require a new app model, such as moving to ASP.NET Core from ASP.NET, require more work. Many patterns from the old app model have equivalents that can be used during the conversion. 1. Understand goals \u00b6 Understand if you need to port at all Only port projects that you need to innovate in Maintenance-only projects can safely remain on .NET Framework Make note of your desired target .NET Core 3.1 vs .NET 6 Windows vs MacOS vs Linux Plan & ensure you have click stops So that you can keep shipping working software 2. Inventory \u00b6 Inventory your code and its dependencies Use API Port to do that Analyze your code for legacy Maybe you can drop that before Porting Analyze your dependencies Ensure they offer support for .NET 6 3. Convert projects \u00b6 Replace packages.config With elements in the project Migrate the project files to SDK-style Use Try-Convert to automate this Consider only migrating the project files and not changing the target framework yet Click stops! 4. Move to .NET 6 \u00b6 Understand your dependency graph Identify if you have shared components that needs to continue to work on .NET Framework Retarget those to .NET standard Retarget remainder to .NET Core 3.1 or .NET 6 5. Move to other OS \u00b6 If you want to go cross-platform: Ensure you have a CI system that can support multiple legs Azure DevOps, GitHub actions etc. Add a leg per operating system And run tests! Example of migrating by try-convert \u00b6 Open Windows PowerShell console and go to your solution. Run this command to get list of all installed dotnet tools: $ dotnet tool list -g Package Id Version Commands -------------------------------------- dotnet-ef 6.0.0 dotnet-ef First install the microsoft.dotnet-interactive tool: $ dotnet tool install -g microsoft.dotnet-interactive You can invoke the tool using the following command: dotnet-interactive Tool 'microsoft.dotnet-interactive' (version '1.0.260601') was successfully installed. Then install the api-port and try-convert tools: dotnet tool install -g apiport dotnet tool install -g try-convert To analyze the solution for compatibility with .NET Core run this command and you will get a report in the ApiPortAnalysis.xlsx file: apiport analyze -f . To convert you solution or project run this command: try-convert -w . Now you get conversion complete! and this means that your project or solution is successfully converted to .NET Core framework.","title":"Porting Projects to .NET 6"},{"location":"how-to/porting-csproject-to-net6/#porting-projects-to-net-6","text":"This article provides an overview of what you should consider when porting your code from .NET Framework to .NET (formerly named .NET Core). Porting to .NET from .NET Framework for many projects is relatively straightforward. The complexity of your projects dictates how much work you'll do after the initial migration of the project files. Projects where the app-model is available in .NET (such as libraries, console apps, and desktop apps) usually require little change. Projects that require a new app model, such as moving to ASP.NET Core from ASP.NET, require more work. Many patterns from the old app model have equivalents that can be used during the conversion.","title":"Porting Projects to .NET 6"},{"location":"how-to/porting-csproject-to-net6/#1-understand-goals","text":"Understand if you need to port at all Only port projects that you need to innovate in Maintenance-only projects can safely remain on .NET Framework Make note of your desired target .NET Core 3.1 vs .NET 6 Windows vs MacOS vs Linux Plan & ensure you have click stops So that you can keep shipping working software","title":"1. Understand goals"},{"location":"how-to/porting-csproject-to-net6/#2-inventory","text":"Inventory your code and its dependencies Use API Port to do that Analyze your code for legacy Maybe you can drop that before Porting Analyze your dependencies Ensure they offer support for .NET 6","title":"2. Inventory"},{"location":"how-to/porting-csproject-to-net6/#3-convert-projects","text":"Replace packages.config With elements in the project Migrate the project files to SDK-style Use Try-Convert to automate this Consider only migrating the project files and not changing the target framework yet Click stops!","title":"3. Convert projects"},{"location":"how-to/porting-csproject-to-net6/#4-move-to-net-6","text":"Understand your dependency graph Identify if you have shared components that needs to continue to work on .NET Framework Retarget those to .NET standard Retarget remainder to .NET Core 3.1 or .NET 6","title":"4. Move to .NET 6"},{"location":"how-to/porting-csproject-to-net6/#5-move-to-other-os","text":"If you want to go cross-platform: Ensure you have a CI system that can support multiple legs Azure DevOps, GitHub actions etc. Add a leg per operating system And run tests!","title":"5. Move to other OS"},{"location":"how-to/porting-csproject-to-net6/#example-of-migrating-by-try-convert","text":"Open Windows PowerShell console and go to your solution. Run this command to get list of all installed dotnet tools: $ dotnet tool list -g Package Id Version Commands -------------------------------------- dotnet-ef 6.0.0 dotnet-ef First install the microsoft.dotnet-interactive tool: $ dotnet tool install -g microsoft.dotnet-interactive You can invoke the tool using the following command: dotnet-interactive Tool 'microsoft.dotnet-interactive' (version '1.0.260601') was successfully installed. Then install the api-port and try-convert tools: dotnet tool install -g apiport dotnet tool install -g try-convert To analyze the solution for compatibility with .NET Core run this command and you will get a report in the ApiPortAnalysis.xlsx file: apiport analyze -f . To convert you solution or project run this command: try-convert -w . Now you get conversion complete! and this means that your project or solution is successfully converted to .NET Core framework.","title":"Example of migrating by try-convert"}]}